version: '2.9'
services:
  redis:
    image: redis:7.0.8-alpine
    container_name: redis
    restart: on-failure
#     healthcheck:
#       test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
#       interval: 5s
#       timeout: 5s
#       retries: 5
    network_mode: "host"
 
  db:
    image: postgres:15.2-alpine
    container_name: db
    restart: on-failure
    environment:
      POSTGRES_USER: statuspage
      POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
      POSTGRES_DB: statuspage
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -d statuspage -U statuspage"]
#       interval: 10s
#       timeout: 5s
#       retries: 5
#     volumes:
#       - ./init.sql/db.sql:/docker-entrypoint-initdb.d/init.sql
#       - ./postgresql.conf:/etc/postgresql/postgresql.conf
    network_mode: "host"

  app:
    build: .
    container_name: app
    restart: on-failure
    network_mode: "host"
    environment:
      DATABASE_URL: postgresql://statuspage:${DB_PASSWORD}@localhost:5432/statuspage
      REDIS_URL: redis://localhost:6379/0
#     depends_on:
#       db:
#         condition: service_healthy
#       redis:
#         condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python -c \"import socket, time; \
          s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); \
          time.sleep(5); \
          while True: \
            try: \
              s.connect(('db', 5432)); \
              s.close(); \
              s = socket.socket(socket.AF_INET, socket.SOCK_STREAM); \
              s.connect(('redis', 6379)); \
              s.close(); \
              break; \
            except Exception as e: \
              print(e); \
              time.sleep(1)\""]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  db.sql:
  postgresql.conf:
